<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>자기소개서 작성 도우미</title>
    <!-- 스크린샷 기능을 위한 라이브러리 추가 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        /* 기본 스타일 */
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;700;900&display=swap');
        
        :root {
            --bg-color: #f0f8ff;
            --text-color: #333;
            --primary-color: #007bff;
            --secondary-color: #6c757d;
            --surface-color: white;
            --border-color: #ddd;
            --shadow-color: rgba(0,0,0,0.1);
        }

        body {
            font-family: 'Noto Sans KR', sans-serif;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }

        /* 고대비 모드 스타일 */
        body.high-contrast {
            --bg-color: #121212;
            --text-color: #e0e0e0;
            --primary-color: #bb86fc;
            --secondary-color: #4f4f4f;
            --surface-color: #1e1e1e;
            --border-color: #555;
            --shadow-color: rgba(255,255,255,0.1);
        }

        #appContainer {
            padding-top: 60px; /* 진행 상황 막대를 위한 공간 */
        }

        .page {
            width: 100%;
            max-width: 800px;
            padding: 20px;
            box-sizing: border-box;
            text-align: center;
            display: none;
        }
        
        .page.active {
            display: block;
        }
        
        h1 {
            font-size: 2.2em;
            color: var(--text-color);
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }
        
        .guide-text {
            font-size: 1.1em;
            color: var(--text-color);
            margin-bottom: 20px;
        }

        /* UDL: 소리로 듣기 버튼 */
        .tts-button {
            background: none;
            border: none;
            font-size: 1.2em;
            cursor: pointer;
            padding: 5px;
            color: var(--secondary-color);
        }

        /* 공통 버튼 스타일 */
        .action-button {
            padding: 15px 30px;
            font-size: 1.3em;
            font-weight: 700;
            color: white;
            background-color: var(--primary-color);
            border: none;
            border-radius: 10px;
            cursor: pointer;
            transition: background-color 0.3s;
            margin-top: 20px;
        }
        .action-button:hover { background-color: #0056b3; }
        body.high-contrast .action-button:hover { background-color: #9a52e8; }
        
        .button-group {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 30px;
        }
        .save-button {
            background-color: #28a745;
        }
        .save-button:hover {
            background-color: #218838;
        }


        /* 내비게이션 버튼 (뒤로/앞으로) 공통 스타일 */
        .nav-button {
            position: fixed;
            bottom: 20px;
            width: 50px;
            height: 50px;
            font-size: 1.8em;
            font-weight: bold;
            color: white;
            border: none;
            border-radius: 50%;
            cursor: pointer;
            transition: background-color 0.3s, opacity 0.3s, transform 0.3s;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 0;
            line-height: 1;
            z-index: 10;
            opacity: 0;
            transform: scale(0.8);
            pointer-events: none;
        }
        .nav-button.visible { opacity: 1; transform: scale(1); pointer-events: auto; }
        .back-button { left: 20px; background-color: var(--secondary-color); }
        .forward-button { right: 20px; background-color: var(--primary-color); }
        
        /* --- 페이지별 스타일 --- */

        #page1 .title-container { margin-bottom: 40px; }
        #page1 .title { font-size: 2.5em; font-weight: 700; margin: 0; }
        #page1 .emoji { font-size: 5em; margin-bottom: 15px; }

        #page2 .choice-box { background-color: var(--surface-color); border: 2px solid var(--border-color); }
        #page2 .choice-box h2 { color: var(--primary-color); }
        #page2 .choice-container { display: flex; justify-content: center; gap: 30px; margin-top: 40px; }
        #page2 .choice-box { width: 45%; padding: 30px; border-radius: 15px; cursor: pointer; transition: transform 0.2s, box-shadow 0.2s; }
        #page2 .choice-box:hover { transform: translateY(-5px); box-shadow: 0 4px 15px var(--shadow-color); }
        #page2 .choice-box .icon { font-size: 4em; margin: 20px 0; }
        #page2 .choice-box p { font-size: 1.1em; line-height: 1.6; }
        #page2 .guide { margin-top: 40px; font-size: 0.9em; }
        
        .selection-container { display: flex; flex-wrap: wrap; justify-content: center; gap: 20px; margin-top: 30px; }
        .selection-card { background-color: var(--surface-color); border: 2px solid var(--border-color); }
        .selection-card { width: 150px; padding: 15px; border-radius: 10px; cursor: pointer; transition: transform 0.2s, box-shadow 0.2s, border-color 0.2s; }
        .selection-card:hover { transform: translateY(-5px); box-shadow: 0 4px 15px var(--shadow-color); }
        .selection-card .image-placeholder { width: 120px; height: 120px; margin: 0 auto 15px; background-color: #e9ecef; border-radius: 50%; display: flex; justify-content: center; align-items: center; font-size: 4em; color: var(--text-color); overflow: hidden; }
        body.high-contrast .selection-card .image-placeholder { background-color: #333; }
        .selection-card .name { font-size: 1.3em; font-weight: 700; color: var(--text-color); margin: 0; }
        .selection-card.selected { border-color: var(--primary-color); border-width: 3px; box-shadow: 0 4px 15px var(--shadow-color); }

        #page4_identity .selection-card {
            width: auto;
            padding: 20px 25px; 
        }
        #page4_identity .selection-card .name { font-size: 1.5em; }

        /* 텍스트 입력 박스 스타일 */
        .text-input, textarea.text-input {
            font-family: 'Noto Sans KR', sans-serif;
            font-size: 1.2em;
            padding: 10px 15px;
            border-radius: 10px;
            border: 2px solid var(--border-color);
            background-color: var(--surface-color);
            color: var(--text-color);
            width: 80%;
            max-width: 400px;
            text-align: center;
        }
        textarea.text-input { text-align: left; }
        .text-input-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            margin-top: 20px;
        }
        
        /* 이력서 미리보기 스타일 */
        .resume-container { background-color: var(--surface-color); border-radius: 15px; padding: 30px; box-shadow: 0 4px 20px var(--shadow-color); max-width: 500px; margin: 20px auto; text-align: left; }
        .resume-header { display: flex; align-items: center; border-bottom: 2px solid var(--border-color); padding-bottom: 20px; margin-bottom: 20px; }
        .resume-photo { width: 100px; height: 100px; border-radius: 50%; background-color: #e9ecef; display: flex; justify-content: center; align-items: center; font-size: 4em; color: var(--text-color); margin-right: 20px; flex-shrink: 0; overflow: hidden; }
        .resume-name { font-weight: 700; font-size: 1.8em; margin: 0; }
        .resume-gender { font-size: 1.2em; margin: 5px 0 0; }
        .resume-section { margin-bottom: 25px; }
        .resume-section-title { font-size: 1.3em; font-weight: 700; color: var(--primary-color); margin-bottom: 10px; }
        .resume-items, .resume-text { font-size: 1.2em; color: var(--text-color); line-height: 1.8; margin: 0; white-space: pre-wrap; }
        .resume-text strong { color: var(--primary-color); font-weight: 900; }
        
        /* UDL: 진행 상황 막대 */
        .progress-bar-container { width: 100%; background-color: #e0e0e0; position: fixed; top: 0; left: 0; z-index: 20; }
        .progress-bar { width: 0%; height: 10px; background-color: var(--primary-color); transition: width 0.3s ease-in-out; }

        /* UDL: 고대비 모드 토글 */
        .theme-toggle { position: fixed; top: 15px; right: 20px; background: var(--surface-color); border: 2px solid var(--border-color); border-radius: 50%; width: 40px; height: 40px; cursor: pointer; font-size: 1.5em; z-index: 20; }

        /* AI 로딩 애니메이션 */
        .loading-animation {
            margin-top: 30px;
        }
        .loading-bar-container {
            width: 80%;
            max-width: 400px;
            height: 20px;
            background-color: var(--border-color);
            border-radius: 10px;
            margin: 20px auto;
            overflow: hidden;
            position: relative;
        }
        .loading-bar {
            position: absolute;
            top: 0;
            left: 0;
            width: 50%;
            height: 100%;
            background-color: var(--primary-color);
            border-radius: 10px;
            animation: loading-animation 2s infinite linear;
        }
        @keyframes loading-animation {
            0% { transform: translateX(-100%); }
            50% { transform: translateX(200%); }
            100% { transform: translateX(-100%); }
        }


        @media (max-width: 600px) {
            #page2 .choice-container { flex-direction: column; align-items: center; }
            #page2 .choice-box { width: 90%; }
            .selection-card { width: 120px; }
            .selection-card .image-placeholder { width: 100px; height: 100px; }
            #page4_identity .selection-card { width: auto; padding: 15px 30px; }
        }
    </style>
</head>
<body>
    <main id="appContainer">
        <!-- UDL 요소들 -->
        <div class="progress-bar-container"><div id="progressBar" class="progress-bar"></div></div>
        <button id="themeToggle" class="theme-toggle">🌙</button>

        <!-- 페이지 컨테이너 -->
        <div id="page1" class="page active"></div>
        <div id="page2" class="page"></div>
        <!-- '그림을 골라요' 경로 -->
        <div id="page4_identity" class="page"></div>
        <div id="page6_likes_picture" class="page"></div>
        <div id="page7_skills" class="page"></div>
        <!-- '글로 써요' 경로 -->
        <div id="page_text_1_name" class="page"></div> 
        <div id="page_text_2_age" class="page"></div>
        <div id="page_text_3_address" class="page"></div>
        <div id="page_text_4_likes" class="page"></div>
        <div id="page_text_5_strengths" class="page"></div>
        <div id="page_text_6_reason" class="page"></div>
        <div id="page_text_7_confirm" class="page"></div> <!-- AI 확인 및 수정 페이지 -->
        <!-- 공통 경로 -->
        <div id="page5_gender" class="page"></div>
        <!-- 결과 페이지 -->
        <div id="page_picture_8_preview" class="page"></div>
        <div id="page_text_8_preview" class="page"></div>
        
        <!-- 내비게이션 버튼 (공통) -->
        <button id="backButton" class="nav-button back-button">←</button>
        <button id="forwardButton" class="nav-button forward-button">→</button>
    </main>


    <script>
        // --- 초기 페이지 내용 설정 ---
        function getSpeakButton(text) { return `<button class="tts-button" onclick="speakText('${text}')">🔊</button>`; }
        document.getElementById('page1').innerHTML = `<div class="title-container"><div class="emoji">📝</div><h1 class="title">개별반 친구들을 위한<br>자기소개서 작성 도우미</h1></div><button id="goToPage2" class="action-button">시작하기</button>`;
        document.getElementById('page2').innerHTML = `<h1>어떤 방법으로 만들까요? ${getSpeakButton('어떤 방법으로 만들까요?')}</h1><div class="choice-container"><div id="choicePicture" class="choice-box"><div class="icon">🎨</div><h2>그림으로 써요</h2><p>그림을 선택하여<br>자기소개서를 완성해요</p></div><div id="choiceText" class="choice-box"><div class="icon">✍️</div><h2>글로 써요</h2><p>질문에 답하며<br>자기소개서를 완성해요.</p></div></div><p class="guide"><strong>선생님 가이드:</strong> 학생의 특성에 맞는 방법을 선택하도록 지도해주세요.</p>`;
        document.getElementById('page4_identity').innerHTML = `<h1>나는 누구인가요?${getSpeakButton('나는 누구인가요?')}</h1><div class="selection-container"><div class="selection-card" onclick="selectName('심현우')"><p class="name">심현우</p></div><div class="selection-card" onclick="selectName('이예준')"><p class="name">이예준</p></div><div class="selection-card" onclick="selectName('최규태')"><p class="name">최규태</p></div><div class="selection-card" onclick="selectName('성유민')"><p class="name">성유민</p></div><div class="selection-card" onclick="selectName('안지수')"><p class="name">안지수</p></div></div>`;
        document.getElementById('page_text_1_name').innerHTML = `<h1>나의 이름은?${getSpeakButton('나의 이름은?')}</h1><div><input type="text" id="nameInput" class="text-input" placeholder="여기에 이름을 써주세요"></div><button id="submitNameButton" class="action-button">다음</button>`;
        document.getElementById('page_text_2_age').innerHTML = `<h1>나이는 몇 살인가요?${getSpeakButton('나이는 몇 살인가요?')}</h1><div class="text-input-container"><input type="number" id="ageInput" class="text-input" placeholder="숫자로 써주세요"></div><button id="submitAgeButton" class="action-button">다음</button>`;
        document.getElementById('page_text_3_address').innerHTML = `<h1>어디에 살고 있나요?${getSpeakButton('어디에 살고 있나요?')}</h1><div class="text-input-container"><input type="text" id="addressCityInput" class="text-input" placeholder="00도"><input type="text" id="addressDistrictInput" class="text-input" placeholder="00시"></div><button id="submitAddressButton" class="action-button">다음</button>`;
        document.getElementById('page_text_4_likes').innerHTML = `<h1>좋아하는 것은 무엇인가요?${getSpeakButton('좋아하는 것은 무엇인가요?')}</h1><p class="guide-text">좋아하는 것을 3개까지 직접 써주세요.</p><div class="text-input-container"><input type="text" class="text-input like-input" placeholder="첫 번째 좋아하는 것"><input type="text" class="text-input like-input" placeholder="두 번째 좋아하는 것"><input type="text" class="text-input like-input" placeholder="세 번째 좋아하는 것"></div><button id="submitLikesButton" class="action-button">다음</button>`;
        document.getElementById('page_text_5_strengths').innerHTML = `<h1>나의 장점은 무엇인가요?${getSpeakButton('나의 장점은 무엇인가요?')}</h1><div class="text-input-container"><textarea id="strengthsInput" class="text-input" rows="3" placeholder="나의 좋은 점을 써주세요"></textarea></div><button id="submitStrengthsButton" class="action-button">다음</button>`;
        document.getElementById('page_text_6_reason').innerHTML = `<h1>왜 이 회사에 지원했나요?${getSpeakButton('왜 이 회사에 지원했나요?')}</h1><div class="text-input-container"><input type="text" id="reasonInput" class="text-input" placeholder="지원한 이유"></div><button id="finishTextButton" class="action-button">완료</button>`;
        document.getElementById('page5_gender').innerHTML = `<h1>나는 남자인가요? 여자인가요?${getSpeakButton('나는 남자인가요? 여자인가요?')}</h1><div class="selection-container"><div class="selection-card" onclick="selectGender('남자')"><div class="image-placeholder">👦</div><p class="name">남자</p></div><div class="selection-card" onclick="selectGender('여자')"><div class="image-placeholder">👧</div><p class="name">여자</p></div></div>`;
        document.getElementById('page6_likes_picture').innerHTML = `<h1>무엇을 좋아하나요?${getSpeakButton('무엇을 좋아하나요?')}</h1><p class="guide-text">좋아하는 것을 최대 3개까지 고를 수 있어요. 다 고르면 '다음' 버튼을 눌러주세요.</p><div class="selection-container"><div class="selection-card" onclick="selectLike(this, '책 읽기')"><div class="image-placeholder">📖</div><p class="name">책 읽기</p></div><div class="selection-card" onclick="selectLike(this, '영화 보기')"><div class="image-placeholder">🎬</div><p class="name">영화 보기</p></div><div class="selection-card" onclick="selectLike(this, '게임 하기')"><div class="image-placeholder">🎮</div><p class="name">게임 하기</p></div><div class="selection-card" onclick="selectLike(this, '퍼즐 맞추기')"><div class="image-placeholder">🧩</div><p class="name">퍼즐 맞추기</p></div><div class="selection-card" onclick="selectLike(this, '달리기')"><div class="image-placeholder">🏃‍♂️</div><p class="name">달리기</p></div><div class="selection-card" onclick="selectLike(this, '음악 듣기')"><div class="image-placeholder">🎧</div><p class="name">음악 듣기</p></div></div><button id="goToPage7" class="action-button">다음</button>`;
        document.getElementById('page7_skills').innerHTML = `<h1>내가 잘 하는 것은 무엇인가요?${getSpeakButton('내가 잘 하는 것은 무엇인가요?')}</h1><p class="guide-text">잘하는 것을 최대 3개까지 고를 수 있어요. 다 고르면 '완료' 버튼을 눌러주세요.</p><div class="selection-container"><div class="selection-card" onclick="selectSkill(this, '요리하기')"><div class="image-placeholder">🍳</div><p class="name">요리하기</p></div><div class="selection-card" onclick="selectSkill(this, '음료 만들기')"><div class="image-placeholder">🥤</div><p class="name">음료 만들기</p></div><div class="selection-card" onclick="selectSkill(this, '커피 만들기')"><div class="image-placeholder">☕</div><p class="name">커피 만들기</p></div><div class="selection-card" onclick="selectSkill(this, '배달하기')"><div class="image-placeholder">🛵</div><p class="name">배달하기</p></div><div class="selection-card" onclick="selectSkill(this, '청소하기')"><div class="image-placeholder">🧹</div><p class="name">청소하기</p></div><div class="selection-card" onclick="selectSkill(this, '조립하기')"><div class="image-placeholder">🔩</div><p class="name">조립하기</p></div></div><button id="finishPictureButton" class="action-button">완료</button>`;

        // --- 전역 변수 및 요소 ---
        const pages = document.querySelectorAll('.page');
        const backButton = document.getElementById('backButton');
        const forwardButton = document.getElementById('forwardButton');
        const progressBar = document.getElementById('progressBar');
        const themeToggle = document.getElementById('themeToggle');
        
        let resumeData = {};
        let navigationHistory = ['page1'];
        let currentPageIndex = 0;
        
        // --- Gemini API 호출 ---
        async function callGeminiAPI(prompt) {
            const apiKey = "AIzaSyCC8Shs3aQGIk-dTNi9RL3mC-A622wwGjI";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = { contents: [{ "parts": [{ "text": prompt }] }] };
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 15000);

            try {
                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload),
                    signal: controller.signal
                });
                clearTimeout(timeoutId);

                if (response.status >= 500) return { success: false, errorType: 'server', message: 'AI 서버가 잠시 바쁜 것 같아요.' };
                if (response.status >= 400) return { success: false, errorType: 'client', message: 'AI 서버에 문제가 발생했습니다.' };
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                
                const result = await response.json();
                const candidate = result.candidates?.[0];

                if (!candidate) return { success: false, errorType: 'empty', message: 'AI가 답변을 생성하지 못했습니다.' };
                if (candidate.finishReason === 'SAFETY') return { success: false, errorType: 'safety', message: '입력 내용에 부적절한 단어가 포함되어 자기소개서를 만들 수 없습니다.' };
                if (candidate.content?.parts?.[0]?.text) {
                    return { success: true, text: candidate.content.parts[0].text };
                }

                return { success: false, errorType: 'unknown', message: '알 수 없는 오류가 발생했습니다.' };

            } catch (error) {
                clearTimeout(timeoutId);
                if (error.name === 'AbortError') {
                    return { success: false, errorType: 'timeout', message: 'AI의 답변이 너무 늦어지고 있어요.' };
                }
                console.error("API 호출 중 오류 발생:", error);
                return { success: false, errorType: 'network', message: '인터넷 연결을 확인해주세요.' };
            }
        }


        // --- UDL 기능 함수 ---
        function speakText(text) {
            window.speechSynthesis.cancel();
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'ko-KR';
            window.speechSynthesis.speak(utterance);
        }

        themeToggle.addEventListener('click', () => {
            document.body.classList.toggle('high-contrast');
            themeToggle.textContent = document.body.classList.contains('high-contrast') ? '☀️' : '🌙';
        });

        // --- 내비게이션 및 진행상황 ---
        function getPageStep(pageId) {
            const stepMap = { 'page1': 1, 'page2': 2, 'page4_identity': 3, 'page5_gender': 4, 'page6_likes_picture': 5, 'page7_skills': 6, 'page_picture_8_preview': 7, 'page_text_1_name': 3, 'page_text_2_age': 4, 'page_text_3_address': 5, 'page_text_4_likes': 6, 'page_text_5_strengths': 7, 'page_text_6_reason': 8, 'page_text_7_confirm': 9, 'page_text_8_preview': 10 };
            return stepMap[pageId] || 0;
        }

        function updateProgressBar() {
            const totalSteps = resumeData.path === 'picture' ? 7 : 10;
            const currentStep = getPageStep(navigationHistory[currentPageIndex]);
            const progress = currentStep > 0 ? ((currentStep - 1) / (totalSteps - 2)) * 100 : 0;
            progressBar.style.width = `${Math.min(progress, 100)}%`;
        }

        function updateNavButtons() {
            backButton.classList.toggle('visible', currentPageIndex > 0);
            forwardButton.classList.toggle('visible', currentPageIndex < navigationHistory.length - 1);
        }

        function showPage(pageId) {
            pages.forEach(page => page.classList.remove('active'));
            document.getElementById(pageId).classList.add('active');
            updateNavButtons();
            updateProgressBar();
        }

        function navigateTo(pageId) {
            if (currentPageIndex < navigationHistory.length - 1) {
                navigationHistory = navigationHistory.slice(0, currentPageIndex + 1);
            }
            navigationHistory.push(pageId);
            currentPageIndex++;
            showPage(pageId);
        }

        // --- 스크린샷 및 이력서 생성/리셋 ---
        function captureResume(containerSelector) {
             const resumeElement = document.querySelector(containerSelector);
            if (resumeElement) {
                const isHighContrast = document.body.classList.contains('high-contrast');
                html2canvas(resumeElement, {
                    backgroundColor: isHighContrast ? '#1e1e1e' : '#ffffff',
                    useCORS: true 
                }).then(canvas => {
                    const link = document.createElement('a');
                    link.download = '나의_자기소개서.png';
                    link.href = canvas.toDataURL('image/png');
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                });
            }
        }
        
        function generatePictureResumePreview() {
            const previewPage = document.getElementById('page_picture_8_preview');
            const { name = '선택안함', gender = '선택안함', likes = [], skills = [] } = resumeData;
            const likesText = likes.length > 0 ? likes.join(', ') : '선택 안 함';
            const skillsText = skills.length > 0 ? skills.join(', ') : '선택 안 함';
            let photoHTML = (gender === '남자') ? '👦' : (gender === '여자') ? '👧' : '👤';

            previewPage.innerHTML = `
                <h1>자기소개서가 완성되었어요! ${getSpeakButton('자기소개서가 완성되었어요!')}</h1>
                <div class="resume-wrapper">
                    <div class="resume-container">
                        <div class="resume-header">
                            <div class="resume-photo">${photoHTML}</div>
                            <div><p class="resume-name">${name}</p><p class="resume-gender">${gender}</p></div>
                        </div>
                        <div class="resume-section"><h2 class="resume-section-title">❤️ 내가 좋아하는 것</h2><p class="resume-items">${likesText}</p></div>
                        <div class="resume-section"><h2 class="resume-section-title">👍 내가 잘하는 것</h2><p class="resume-items">${skillsText}</p></div>
                    </div>
                </div>
                <div class="button-group">
                    <button class="action-button save-button">자기소개서 저장</button>
                    <button class="action-button">처음으로</button>
                </div>`;
            
            previewPage.querySelector('.save-button').addEventListener('click', () => captureResume('#page_picture_8_preview .resume-container'));
            previewPage.querySelector('.action-button:not(.save-button)').addEventListener('click', resetApp);
        }

        async function generateTextResume() {
            const loadingPage = document.getElementById('page_text_7_confirm'); // 로딩 페이지 ID 변경
            loadingPage.innerHTML = `<h1>AI가 자기소개서를 다듬고 있어요... ${getSpeakButton('AI가 자기소개서를 다듬고 있어요. 잠시만 기다려주세요.')}</h1><div class="loading-animation"><div class="loading-bar-container"><div class="loading-bar"></div></div></div>`;
            navigateTo('page_text_7_confirm');

            const prompt = `당신은 특수학급 중학생의 자기소개서를 쉽고 자연스러운 문장으로 완성하는 AI 글쓰기 도우미입니다. 아래 '정보'를 사용하여 자기소개서 한 문단을 만들어 주세요.
            **[중요 규칙]**
            1. 자기소개서는 "안녕하세요. 제 이름은 [이름]입니다."로 시작해야 합니다.
            2. 모든 문장은 반드시 '요'가 아닌 '다' 또는 '습니다'로 끝나야 합니다. (예: "저는 학생입니다.")
            3. 마지막 문장은 반드시 "이것이 제가 이 회사에 지원한 이유입니다." 또는 "[지원 이유] 때문에 이 회사에 지원하게 되었습니다."와 같은 형식이어야 합니다.
            4. 불필요한 인사나 설명 없이, 완성된 자기소개서 문단만 생성해야 합니다.
            5. 전체 내용은 하나의 문단으로, 줄바꿈 없이 자연스럽게 이어져야 합니다.

            **[정보]**
            - 이름: ${resumeData.name}
            - 나이: ${resumeData.age}
            - 거주지: ${resumeData.addressCity} ${resumeData.addressDistrict}
            - 좋아하는 것: ${resumeData.likes.join(', ')}
            - 장점: ${resumeData.strengths}
            - 회사에 지원한 이유: ${resumeData.reason}`;

            const result = await callGeminiAPI(prompt);
            
            if (result && result.success) {
                resumeData.aiGeneratedText = result.text.replace(/\n/g, ' ');
                showConfirmPage();
            } else {
                showErrorPage(result);
            }
        }

        function showConfirmPage() {
            const confirmPage = document.getElementById('page_text_7_confirm');
            confirmPage.innerHTML = `
                <h1>AI가 자기소개서를 완성했어요! ${getSpeakButton('AI가 자기소개서를 완성했어요!')}</h1>
                <p class="guide-text">아래 글을 확인하고, 마음에 들면 '완성!' 버튼을 누르세요.<br>마음에 들지 않으면 '다시 만들어 주세요'를 누르거나, 직접 수정할 수 있어요.</p>
                <textarea id="confirmTextArea" class="text-input" rows="8"></textarea>
                <div class="button-group">
                    <button id="regenerateButton" class="action-button save-button">다시 만들어 주세요</button>
                    <button id="completeButton" class="action-button">완성!</button>
                </div>`;
            
            document.getElementById('confirmTextArea').value = resumeData.aiGeneratedText;
            document.getElementById('regenerateButton').addEventListener('click', generateTextResume);
            document.getElementById('completeButton').addEventListener('click', () => {
                resumeData.finalText = document.getElementById('confirmTextArea').value;
                showFinalTextPreview();
            });
            showPage('page_text_7_confirm');
        }

        function showFinalTextPreview() {
             const previewPage = document.getElementById('page_text_8_preview');
             previewPage.innerHTML = `
                <h1>자기소개서가 완성되었어요! ${getSpeakButton('자기소개서가 완성되었어요!')}</h1>
                <div class="resume-wrapper">
                    <div class="resume-container">
                        <p class="resume-text">${resumeData.finalText}</p>
                    </div>
                </div>
                <div class="button-group">
                    <button class="action-button save-button">자기소개서 저장</button>
                    <button class="action-button">처음으로</button>
                </div>`;
            
            previewPage.querySelector('.save-button').addEventListener('click', () => captureResume('#page_text_8_preview .resume-container'));
            previewPage.querySelector('.action-button:not(.save-button)').addEventListener('click', resetApp);
            navigateTo('page_text_8_preview');
        }

        function showErrorPage(result) {
            const errorPage = document.getElementById('page_text_7_confirm'); // 로딩 페이지를 에러 페이지로 재활용
            const errorMessage = result ? result.message : "알 수 없는 오류가 발생했습니다.";
            const retryButtonText = result && result.errorType === 'safety' ? '수정하기' : '다시 시도';
            errorPage.innerHTML = `
                <h1>자기소개서 생성 실패</h1>
                <div class="resume-container">
                    <p class="resume-text">${errorMessage}</p>
                </div>
                <div class="button-group">
                    <button class="action-button save-button">${retryButtonText}</button>
                    <button class="action-button">처음으로</button>
                </div>`;
            
            const retryButton = errorPage.querySelector('.save-button');
            if (result && result.errorType === 'safety') {
                retryButton.addEventListener('click', () => showPage('page_text_6_reason'));
            } else {
                retryButton.addEventListener('click', generateTextResume);
            }
            errorPage.querySelector('.action-button:not(.save-button)').addEventListener('click', resetApp);
            showPage('page_text_7_confirm');
        }

        function resetApp(path = '') {
            resumeData = { path: path, likes: [], skills: [] };
            navigationHistory = ['page1'];
            currentPageIndex = 0;
            document.querySelectorAll('.selection-card.selected').forEach(card => card.classList.remove('selected'));
            document.querySelectorAll('.text-input').forEach(input => input.value = '');
            showPage('page1');
        }

        // --- 선택 함수 ---
        function selectName(name) { resumeData.name = name; navigateTo('page5_gender'); }
        function selectGender(gender) { resumeData.gender = gender; navigateTo(resumeData.path === 'picture' ? 'page6_likes_picture' : 'page_text_2_age'); }
        
        function selectLike(element, like) {
            const isSelected = element.classList.contains('selected');
            if (!isSelected && resumeData.likes.length >= 3) { alert("최대 3개까지만 선택할 수 있어요."); return; }
            element.classList.toggle('selected');
            const index = resumeData.likes.indexOf(like);
            if (index > -1) { resumeData.likes.splice(index, 1); } else { resumeData.likes.push(like); }
        }

        function selectSkill(element, skill) {
            const isSelected = element.classList.contains('selected');
            if (!isSelected && resumeData.skills.length >= 3) { alert("최대 3개까지만 선택할 수 있어요."); return; }
            element.classList.toggle('selected');
            const index = resumeData.skills.indexOf(skill);
            if (index > -1) { resumeData.skills.splice(index, 1); } else { resumeData.skills.push(skill); }
        }

        // --- 이벤트 리스너 설정 ---
        function setupEventListeners() {
            document.getElementById('goToPage2').addEventListener('click', () => navigateTo('page2'));
            document.getElementById('choicePicture').addEventListener('click', () => { resetApp('picture'); navigateTo('page4_identity'); });
            document.getElementById('choiceText').addEventListener('click', () => { resetApp('text'); navigateTo('page_text_1_name'); });
            
            document.getElementById('submitNameButton').addEventListener('click', () => {
                const input = document.getElementById('nameInput');
                if (input.value.trim() === '') { alert("이름을 입력해주세요!"); return; }
                resumeData.name = input.value.trim();
                navigateTo('page_text_2_age');
            });
             document.getElementById('submitAgeButton').addEventListener('click', () => {
                const input = document.getElementById('ageInput');
                if (input.value.trim() === '') { alert("나이를 입력해주세요!"); return; }
                resumeData.age = input.value.trim();
                navigateTo('page_text_3_address');
            });
            document.getElementById('submitAddressButton').addEventListener('click', () => {
                const cityInput = document.getElementById('addressCityInput');
                const districtInput = document.getElementById('addressDistrictInput');
                if (cityInput.value.trim() === '' || districtInput.value.trim() === '') { alert("사는 곳을 모두 입력해주세요!"); return; }
                resumeData.addressCity = cityInput.value.trim();
                resumeData.addressDistrict = districtInput.value.trim();
                navigateTo('page_text_4_likes');
            });
            document.getElementById('submitLikesButton').addEventListener('click', () => {
                const likeInputs = document.querySelectorAll('#page_text_4_likes .like-input');
                const likes = Array.from(likeInputs).map(input => input.value.trim()).filter(like => like !== '');
                if (likes.length === 0) { alert("좋아하는 것을 하나 이상 입력해주세요!"); return; }
                resumeData.likes = likes;
                navigateTo('page_text_5_strengths');
            });
            document.getElementById('submitStrengthsButton').addEventListener('click', () => {
                const input = document.getElementById('strengthsInput');
                if (input.value.trim() === '') { alert("장점을 입력해주세요!"); return; }
                resumeData.strengths = input.value.trim();
                navigateTo('page_text_6_reason');
            });
            document.getElementById('finishTextButton').addEventListener('click', () => {
                const input = document.getElementById('reasonInput');
                if (input.value.trim() === '') { alert("지원하는 이유를 입력해주세요!"); return; }
                resumeData.reason = input.value.trim();
                generateTextResume();
            });
            
            document.getElementById('goToPage7').addEventListener('click', () => {
                if(resumeData.likes.length === 0) { alert("좋아하는 것을 하나 이상 선택해주세요!"); return; }
                navigateTo('page7_skills');
            });

            document.getElementById('finishPictureButton').addEventListener('click', () => {
                if (resumeData.skills.length === 0) { alert("잘하는 것을 하나 이상 선택해주세요!"); return; }
                generatePictureResumePreview();
                navigateTo('page_picture_8_preview');
            });

            backButton.addEventListener('click', () => { if (currentPageIndex > 0) { currentPageIndex--; showPage(navigationHistory[currentPageIndex]); } });
            forwardButton.addEventListener('click', () => { if (currentPageIndex < navigationHistory.length - 1) { currentPageIndex++; showPage(navigationHistory[currentPageIndex]); } });
        }
        
        // --- 초기화 ---
        setupEventListeners();
        showPage('page1');

    </script>

</body>
</html>

